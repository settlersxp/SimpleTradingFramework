"""Changed some of the PropFirms columns to optional

Revision ID: e933400c8ad9
Revises: 111af910ca38
Create Date: 2025-01-22 20:16:55.928950

"""

from alembic import context, op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "e933400c8ad9"
down_revision = "111af910ca38"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not context.has_table("prop_firms"):
        # Create the table if it doesn't exist
        op.create_table(
            "prop_firms",
            sa.Column("id", sa.Integer(), primary_key=True),
            sa.Column("name", sa.String(length=100), nullable=False),
            sa.Column("is_active", sa.Boolean(), nullable=False, server_default="1"),
            sa.Column(
                "username",
                sa.String(length=100),
                nullable=True,
                server_default="default_user",
            ),
            sa.Column(
                "password",
                sa.String(length=100),
                nullable=True,
                server_default="default_pass",
            ),
            sa.Column(
                "ip_address",
                sa.String(length=100),
                nullable=True,
                server_default="127.0.0.1",
            ),
            sa.Column("port", sa.Integer(), nullable=True, server_default="8080"),
            sa.Column(
                "platform_type",
                sa.String(length=100),
                nullable=True,
                server_default="MT5",
            ),
            sa.Column(
                "created_at",
                sa.DateTime(),
                nullable=False,
                server_default=sa.func.now(),
            ),
            sa.Column("full_balance", sa.Float(), nullable=False),
            sa.Column("available_balance", sa.Float(), nullable=False),
            sa.Column("drawdown_percentage", sa.Float(), nullable=False),
        )
    else:
        # Define column modifications
        column_modifications = [
            ("username", sa.VARCHAR(length=100), True, "'default_user'"),
            ("password", sa.VARCHAR(length=100), True, "'default_pass'"),
            ("ip_address", sa.VARCHAR(length=100), True, "'127.0.0.1'"),
            ("port", sa.INTEGER(), True, "'8080'"),
            ("platform_type", sa.VARCHAR(length=100), True, "'MT5'"),
            ("is_active", sa.BOOLEAN(), True, "'1'"),
        ]

        # Define columns to add if they don't exist
        columns_to_add = [
            ("created_at", sa.DateTime(), False, sa.func.now()),
            ("full_balance", sa.Float(), False, None),
            ("available_balance", sa.Float(), False, None),
            ("drawdown_percentage", sa.Float(), False, None),
        ]

        with op.batch_alter_table("prop_firms", schema=None) as batch_op:

            # Add new columns if they don't exist
            for col_name, col_type, nullable, default in columns_to_add:
                if not context.has_column("prop_firms", col_name):
                    if default is not None:
                        batch_op.add_column(
                            sa.Column(
                                col_name,
                                col_type,
                                nullable=nullable,
                                server_default=default,
                            )
                        )
                    else:
                        batch_op.add_column(
                            sa.Column(col_name, col_type, nullable=nullable)
                        )

            # Apply column modifications
            for col_name, col_type, nullable, default in column_modifications:
                batch_op.alter_column(
                    col_name,
                    existing_type=col_type,
                    nullable=nullable,
                    existing_server_default=sa.text(default),
                )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if context.has_table("prop_firms"):
        # Define column modifications for downgrade
        column_modifications = [
            ("username", sa.VARCHAR(length=100), False, "'default_user'"),
            ("password", sa.VARCHAR(length=100), False, "'default_pass'"),
            ("ip_address", sa.VARCHAR(length=100), False, "'127.0.0.1'"),
            ("port", sa.INTEGER(), False, "'8080'"),
            ("platform_type", sa.VARCHAR(length=100), False, "'MT5'"),
        ]

        # Define columns to drop
        columns_to_drop = [
            "created_at",
            "full_balance",
            "available_balance",
            "drawdown_percentage",
        ]

        with op.batch_alter_table("prop_firms", schema=None) as batch_op:
            # Apply column modifications
            for col_name, col_type, nullable, default in column_modifications:
                batch_op.alter_column(
                    col_name,
                    existing_type=col_type,
                    nullable=nullable,
                    existing_server_default=sa.text(default),
                )

            # Drop columns if they exist
            for col_name in columns_to_drop:
                if context.has_column("prop_firms", col_name):
                    batch_op.drop_column(col_name)
    # ### end Alembic commands ###
